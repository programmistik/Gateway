var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var sassMiddleware = require('node-sass-middleware');

var indexRouter = require('./routes/index');
//var usersRouter = require('./routes/users');
//var productsRouter = require('./routes/products');
var postsRouter = require('./routes/posts');

var app = express();

//SWAGGER
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const options = {
    swaggerDefinition: {
        // Like the one described here: https://swagger.io/specification/#infoObject
        info: {
            title: 'Instagram API',
            version: '1.0.0',
            description: 'Test Express API with autogenerated swagger doc',
        },
    },
    // List of files to be processes. You can also set globs './routes/*.js'
    apis: ['./routes/posts.js'],
};
const specs = swaggerJsdoc(options);
app.use('/swagger', swaggerUi.serve, swaggerUi.setup(specs));

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'hbs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(sassMiddleware({
    src: path.join(__dirname, 'public'),
    dest: path.join(__dirname, 'public'),
    indentedSyntax: true, // true = .sass and false = .scss
    sourceMap: true
}));
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
//app.use('/users', usersRouter);
app.use('/posts', postsRouter);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
    next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

module.exports = app;


//var express = require('express'),
//    bodyParser = require('body-parser'),
//    //_ = require('underscore'),
//    //json = require('./movies.json'),
//    app = express();

app.set('port', process.env.PORT || 3300);
//app.use(bodyParser.urlencoded());
//app.use(bodyParser.json());

//let mongo = require('mongodb');
//let MClient = mongo.MongoClient;
//let url = 'mongodb://localhost:27017';
//let dbName = 'InstaApp';
//let client = new MClient(url, { useUnifiedTopology: true, useNewUrlParser: true });

//var router = new express.Router();

//// TO DO: Setup endpoints ...

//router.get('/', function (req, res) {
   
//    client.connect(async (err, res) => {
//        let db = client.db(dbName);
//        let collection = db.collection('Posts');

//        let result = await collection.find({}).toArray();

//        res.json(result);
//    });
//});

//router.post('/', function (req, res) {
//    // insert the new item into the collection (validate first)
//    if (req.body.Id && req.body.Title && req.body.ProfileId) {
//        client.connect(async (err, res) => {

//            if (err) {
//                throw new Error(err);
//            }

//            let db = client.db(dbName);
//            let coll = db.collection('Posts');

//            let item = req.body;


//            let response = await coll.insertOne(item);
//            //console.log(response);
//           res.json(item);
//        });
       
//    } else {
//        res.json(500, { error: 'There was an error!' });
//    }
//});

//app.use('/', router);

var server = app.listen(app.get('port'), function () {
    console.log('Server up: http://localhost:' + app.get('port'));
});

